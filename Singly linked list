#include <stdio.h>
#include <stdlib.h>
struct Node
{
 int data;
 struct Node *next;
}*head=NULL;
int count(struct Node *p)
{
 int c=0;
 while(p)
 {
 c++;
 p=p->next;
 }
 return c;
}
void create(int A[],int n)
{
 int i;
 struct Node *t,*last;
 head=(struct Node *)malloc(sizeof(struct Node));
 head->data=A[0];
 head->next=NULL;
 last=head;
 for(i=1;i<n;i++)
 {
 t=(struct Node*)malloc(sizeof(struct Node));
 t->data=A[i];
 t->next=NULL;
 last->next=t;
 last=t;
 }
}
void insert(int pos,int x)
{
    struct Node *t,*p;
    if(pos==0)
    {
        t=(struct Node*)malloc(sizeof(struct Node));
        t->data=x;
        t->next=head;
        head=t;
    }
    else if(pos>0)
    {
        p=head;
        for(int i=0;i<pos-1 && p;i++)
        p=p->next;
        if(p)
        {
            t=(struct Node*)malloc(sizeof(struct Node));
            t->data=x;
            t->next=p->next;
            p->next=t;
        }
    }
}
void lastt(int x)
{
    struct Node*t,*last;
     t=(struct Node*)malloc(sizeof(struct Node));
     t->data=x;
     t->next=NULL;
     if(head==NULL)
     {
         head=last=t;
     }
    else
    {
        last->next=t;
        last=t;
    }
}
void Display(struct Node *p)
{
 while(p!=NULL)
 {
 printf("%d ",p->data);
 p=p->next;
 }
}
int Delete(struct Node *p,int index)
{
 struct Node *q=NULL;
 int x=-1,i;
 if(index==1)
 {
 q=head;
 x=head->data;
 head=head->next;
 free(q);
 return x;
 }
 else
 {
 for(i=0;i<index-1;i++)
 {
 q=p;
 p=p->next;
 }
 q->next=p->next;
 x=p->data;
 free(p);
 return x;
 }
}
void Reverse1(struct Node *p) //copying elements to new LL then copying back
{
 int *A,i=0;
 struct Node *q=p;
 A=(int *)malloc(sizeof(int)*count(p));
 while(q!=NULL)
 {
 A[i]=q->data;
 q=q->next;
 i++;
 }
 q=p;
 i--;
 while(q!=NULL)
 {
 q->data=A[i];
 q=q->next;
 i--;
 }
}
void Reverse2(struct Node *p) //reversing links
{
 struct Node *q=NULL,*r=NULL;
 while(p!=NULL)
 {
 r=q;
 q=p;
 p=p->next;
 q->next=r;
 }
 head=q;
}
int main()
{
 struct Node *temp;
 //int A[]={10,20,30,40,50};
 //create(A,8);
 lastt(5);
 lastt(6);
 lastt(7);
 lastt(8);
 Display(head);
 printf("\n");
 insert(2,98);
 Display(head);
 printf("\n");
 insert(0,100);
 Display(head);
 printf(â€œ%d \n",Delete(head,1));
 Display(head);
 printf("\n");
 Reverse2(head);
 Display(head);
 return 0;
}
